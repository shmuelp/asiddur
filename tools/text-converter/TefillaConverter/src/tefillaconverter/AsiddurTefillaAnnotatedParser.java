/*
 * File:           AsiddurTefillaAnnotatedParser.java
 * Date:           November 20, 2006  11:02 PM
 *
 * @author  shmuelp
 * @version generated by NetBeans XML module
 */
package tefillaconverter;
import org.xml.sax.*;
/**
 * 
 * The class reads XML documents according to specified DTD and 
 * translates all related events into AsiddurTefillaAnnotatedHandler events.
 * <p>Usage sample:
 * <pre>
 *    AsiddurTefillaAnnotatedParser parser = new AsiddurTefillaAnnotatedParser(...);
 *    parser.parse(new InputSource("..."));
 * </pre>
 * <p><b>Warning:</b> the class is machine generated. DO NOT MODIFY</p>
 */
public class AsiddurTefillaAnnotatedParser implements ContentHandler {

   private java.lang.StringBuffer buffer;

   private AsiddurTefillaAnnotatedHandler handler;

   private java.util.Stack context;

   private EntityResolver resolver;

   /**
    * 
    * Creates a parser instance.
    * @param handler handler interface implementation (never <code>null</code>
    * @param resolver SAX entity resolver implementation or <code>null</code>.
    * It is recommended that it could be able to resolve at least the DTD.
    */
   public AsiddurTefillaAnnotatedParser(final AsiddurTefillaAnnotatedHandler handler, final EntityResolver resolver) {
      this.handler = handler;
      this.resolver = resolver;
      buffer = new StringBuffer(111);
      context = new java.util.Stack();
   }

   /**
    * 
    * This SAX interface method is implemented by the parser.
    */
   public final void setDocumentLocator(Locator locator) {
   }

   /**
    * 
    * This SAX interface method is implemented by the parser.
    */
   public final void startDocument() throws SAXException {
   }

   /**
    * 
    * This SAX interface method is implemented by the parser.
    */
   public final void endDocument() throws SAXException {
   }

   /**
    * 
    * This SAX interface method is implemented by the parser.
    */
   public final void startElement(java.lang.String ns, java.lang.String name, java.lang.String qname, Attributes attrs) throws SAXException {
      dispatch(true);
      context.push(new Object[] {qname, new org.xml.sax.helpers.AttributesImpl(attrs)});
      if ("asiddur-annotated".equals(qname)) {
         handler.start_asiddur_annotated(attrs);
      } else if ("text-header".equals(qname)) {
         handler.handle_text_header(attrs);
      } else if ("get".equals(qname)) {
         handler.handle_get(attrs);
      } else if ("toc".equals(qname)) {
         handler.start_toc(attrs);
      } else if ("include".equals(qname)) {
         handler.handle_include(attrs);
      } else if ("p".equals(qname)) {
         handler.handle_p(attrs);
      } else if ("function".equals(qname)) {
         handler.handle_function(attrs);
      } else if ("tefillot".equals(qname)) {
         handler.start_tefillot(attrs);
      } else if ("text".equals(qname)) {
         handler.start_text(attrs);
      } else if ("set".equals(qname)) {
         handler.start_set(attrs);
      } else if ("else".equals(qname)) {
         handler.handle_else(attrs);
      } else if ("br".equals(qname)) {
         handler.handle_br(attrs);
      } else if ("if".equals(qname)) {
         handler.start_if(attrs);
      } else if ("navmark".equals(qname)) {
         handler.handle_navmark(attrs);
      } else if ("texts".equals(qname)) {
         handler.start_texts(attrs);
      } else if ("tefilla".equals(qname)) {
         handler.start_tefilla(attrs);
      }
   }

   /**
    * 
    * This SAX interface method is implemented by the parser.
    */
   public final void endElement(java.lang.String ns, java.lang.String name, java.lang.String qname) throws SAXException {
      dispatch(false);
      context.pop();
      if ("asiddur-annotated".equals(qname)) {
         handler.end_asiddur_annotated();
      } else if ("toc".equals(qname)) {
         handler.end_toc();
      } else if ("tefillot".equals(qname)) {
         handler.end_tefillot();
      } else if ("text".equals(qname)) {
         handler.end_text();
      } else if ("set".equals(qname)) {
         handler.end_set();
      } else if ("if".equals(qname)) {
         handler.end_if();
      } else if ("texts".equals(qname)) {
         handler.end_texts();
      } else if ("tefilla".equals(qname)) {
         handler.end_tefilla();
      }
   }

   /**
    * 
    * This SAX interface method is implemented by the parser.
    */
   public final void characters(char[] chars, int start, int len) throws SAXException {
      buffer.append(chars, start, len);
   }

   /**
    * 
    * This SAX interface method is implemented by the parser.
    */
   public final void ignorableWhitespace(char[] chars, int start, int len) throws SAXException {
   }

   /**
    * 
    * This SAX interface method is implemented by the parser.
    */
   public final void processingInstruction(java.lang.String target, java.lang.String data) throws SAXException {
   }

   /**
    * 
    * This SAX interface method is implemented by the parser.
    */
   public final void startPrefixMapping(final java.lang.String prefix, final java.lang.String uri) throws SAXException {
   }

   /**
    * 
    * This SAX interface method is implemented by the parser.
    */
   public final void endPrefixMapping(final java.lang.String prefix) throws SAXException {
   }

   /**
    * 
    * This SAX interface method is implemented by the parser.
    */
   public final void skippedEntity(java.lang.String name) throws SAXException {
   }

   private void dispatch(final boolean fireOnlyIfMixed) throws SAXException {
      if (fireOnlyIfMixed && buffer.length() == 0) return; //skip it
      
      Object[] ctx = (Object[]) context.peek();
      String here = (String) ctx[0];
      Attributes attrs = (Attributes) ctx[1];
      if ("text".equals(here)) {
         handler.handle_text(buffer.length() == 0 ? null : buffer.toString(), attrs);
      } else if ("set".equals(here)) {
         if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
         handler.handle_set(buffer.length() == 0 ? null : buffer.toString(), attrs);
      } else if ("if".equals(here)) {
         handler.handle_if(buffer.length() == 0 ? null : buffer.toString(), attrs);
      } else if ("name".equals(here)) {
         if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
         handler.handle_name(buffer.length() == 0 ? null : buffer.toString(), attrs);
      } else {
         //do not care
      }
      buffer.delete(0, buffer.length());
   }

   /**
    * 
    * The recognizer entry method taking an InputSource.
    * @param input InputSource to be parsed.
    * @throws java.io.IOException on I/O error.
    * @throws SAXException propagated exception thrown by a DocumentHandler.
    * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
    * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
    */
   public void parse(final InputSource input) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
      parse(input, this);
   }

   /**
    * 
    * The recognizer entry method taking a URL.
    * @param url URL source to be parsed.
    * @throws java.io.IOException on I/O error.
    * @throws SAXException propagated exception thrown by a DocumentHandler.
    * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
    * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
    */
   public void parse(final java.net.URL url) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
      parse(new InputSource(url.toExternalForm()), this);
   }

   /**
    * 
    * The recognizer entry method taking an Inputsource.
    * @param input InputSource to be parsed.
    * @throws java.io.IOException on I/O error.
    * @throws SAXException propagated exception thrown by a DocumentHandler.
    * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
    * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
    */
   public static void parse(final InputSource input, final AsiddurTefillaAnnotatedHandler handler) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
      parse(input, new AsiddurTefillaAnnotatedParser(handler, null));
   }

   /**
    * 
    * The recognizer entry method taking a URL.
    * @param url URL source to be parsed.
    * @throws java.io.IOException on I/O error.
    * @throws SAXException propagated exception thrown by a DocumentHandler.
    * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
    * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
    */
   public static void parse(final java.net.URL url, final AsiddurTefillaAnnotatedHandler handler) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
      parse(new InputSource(url.toExternalForm()), handler);
   }

   private static void parse(final InputSource input, final AsiddurTefillaAnnotatedParser recognizer) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
      javax.xml.parsers.SAXParserFactory factory = javax.xml.parsers.SAXParserFactory.newInstance();
      factory.setValidating(true);  //the code was generated according DTD
      factory.setNamespaceAware(false);  //the code was generated according DTD
      XMLReader parser = factory.newSAXParser().getXMLReader();
      parser.setContentHandler(recognizer);
      parser.setErrorHandler(recognizer.getDefaultErrorHandler());
      if (recognizer.resolver != null) parser.setEntityResolver(recognizer.resolver);
      parser.parse(input);
   }

   /**
    * 
    * Creates default error handler used by this parser.
    * @return org.xml.sax.ErrorHandler implementation
    */
   protected ErrorHandler getDefaultErrorHandler() {
      return new ErrorHandler() { 
         public void error(SAXParseException ex) throws SAXException  {
            if (context.isEmpty()) System.err.println("Missing DOCTYPE.");
            throw ex;
         }
         
         public void fatalError(SAXParseException ex) throws SAXException {
            throw ex;
         }
         
         public void warning(SAXParseException ex) throws SAXException {
            // ignore
         }
      };
      
   }
}
